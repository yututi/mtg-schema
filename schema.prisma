// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LastImported {
  sha String
  at DateTime

  @@id([sha])
}

model Set {
  id          Int           @id @default(autoincrement())
  name        String // ex 神河:Neon dynasty
  code        String // ex neo
  setsOnCards SetsOnCards[]
}

// 以下から日本語データだけ抽出したレコード
// https://mtgjson.com/data-models/card-atomic/
model Card {
  uuid            String           @id
  name            String
  manaCost        String? // ex {1}{W}{B}
  manaValue       Float? // ex 3.0
  colorIdentities String[] // "B", "G", "R", "U", "W"
  types           String[]
  superTypes      String[] // 冠雪、基本などを,区切りで
  subTypes        String[]
  isLegendary     Boolean
  flavorText      String?
  text            String?
  cardTypeJa      String // カードタイプ（日本語） ex クリーチャー ー　人間・兵士
  power           String?
  toughness       String?
  loyalty         String?
  rarity          String?
  scryfallId      String?
  otherFaceUuid     String?

  isImageImported Boolean       @default(false)   // scryfallから画像取得したらtrue

  // importJsonのタイミングでは空
  setsOnCards     SetsOnCards[]

  @@index([colorIdentities], type: Gin)
  @@index([name], type: Hash)
  @@index([types], type: Gin)
}

model SetsOnCards {
  card   Card @relation(fields: [cardId], references: [uuid])
  cardId String // relation scalar field (used in the `@relation` attribute above)
  set    Set  @relation(fields: [setId], references: [id])
  setId  Int // relation scalar field (used in the `@relation` attribute above)

  @@id([cardId, setId])
}
