// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LastImported {
  sha String
  at  DateTime

  @@id([sha])
}

model Set {
  code  String @id // ex neo
  name  String // ex 神河:Neon dynasty
  cards Card[]
}

// 以下から日本語データだけ抽出したレコード
// https://mtgjson.com/data-models/card-atomic/
model Card {
  uuid            String   @id
  name            String
  manaCost        String? // ex {1}{W}{B}
  manaValue       Float? // ex 3.0
  colorIdentities String[] // "B", "G", "R", "U", "W"
  types           String[]
  superTypes      String[] // 冠雪、基本などを,区切りで
  subTypes        String[]
  isLegendary     Boolean
  flavorText      String?
  text            String?
  cardTypeJa      String // カードタイプ（日本語） ex クリーチャー ー　人間・兵士
  power           String?
  toughness       String?
  loyalty         String?
  rarity          String?
  scryfallId      String?
  otherFaceUuid   String? // ここに値がある場合はふたつ呪文を持つカード
  isMainSpell     Boolean @default(false) // ふたつ呪文をもつ場合、メインの呪文か(両面カードの場合表面)
  isReversible    Boolean @default(false) // 両面カードか
  setCode         String
  number          String // 基本的に数値。頭にA-がついていたらAlchemy、お尻に⭐️がついていたりする（実際のカードの印刷準拠）

  set Set @relation(fields: [setCode], references: [code])

  isImageImported Boolean @default(false) // scryfallから画像取得したらtrue

  @@index([setCode], type: Hash)
  @@index([rarity], type: Hash)
  @@index([manaValue], type: Hash)
  @@index([colorIdentities], type: Gin)
  @@index([otherFaceUuid], type: Hash)
  @@index([name], type: Hash)
  @@index([types], type: Gin)
}
